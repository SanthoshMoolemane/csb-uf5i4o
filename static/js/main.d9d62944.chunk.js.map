{"version":3,"sources":["components/Navbar.js","actions/postsActions.js","components/Post.js","pages/PostsPage.js","actions/postActions.js","actions/commentsActions.js","components/Comment.js","pages/SinglePostPage.js","App.js","reducers/postsReducer.js","reducers/postReducer.js","reducers/commentsReducer.js","reducers/index.js","index.js"],"names":["Navbar","react_default","a","createElement","react_router_dom","to","GET_POSTS","GET_POSTS_SUCCESS","GET_POSTS_FAILURE","getPosts","type","getPostsSuccess","posts","payload","getPostsFailure","Post","_ref","post","excerpt","className","title","body","substring","concat","id","connect","state","loading","hasErrors","dispatch","_useState","useState","_useState2","Object","slicedToArray","typedString","setTypedString","useEffect","asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","wrap","_context","prev","next","fetch","sent","json","t0","stop","_x","apply","this","arguments","class","value","onChange","e","target","filter","toLowerCase","includes","map","Post_Post","key","GET_POST","GET_POST_SUCCESS","GET_POST_FAILURE","getPost","getPostSuccess","getPostFailure","GET_COMMENTS","GET_COMMENTS_SUCCESS","GET_COMMENTS_FAILURE","getComments","getCommentsSuccess","comments","getCommentsFailure","Comment","comment","email","match","postId","params","commentsActions_regeneratorRuntime","postActions_regeneratorRuntime","fetchPost","Comment_Comment","App","Navbar_Navbar","react_router","exact","path","component","PostsPage","SinglePostPage","initialState","rootReducer","combineReducers","length","undefined","action","actions","objectSpread2","store","createStore","composeWithDevTools","applyMiddleware","thunk","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d9d62944.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Navbar = () => (\n  <nav>\n    <section>\n      <Link to=\"/\">Dashboard</Link>\n      <Link to=\"/posts\">Posts</Link>\n    </section>\n  </nav>\n)\n","export const GET_POSTS = 'GET POSTS'\nexport const GET_POSTS_SUCCESS = 'GET_POSTS_SUCCESS'\nexport const GET_POSTS_FAILURE = 'GET_POSTS_FAILURE'\n\nexport const getPosts = () => ({ type: GET_POSTS })\nexport const getPostsSuccess = posts => ({\n  type: GET_POSTS_SUCCESS,\n  payload: posts,\n})\nexport const getPostsFailure = () => ({ type: GET_POSTS_FAILURE })\n\nexport function fetchPosts() {\n  return async dispatch => {\n    dispatch(getPosts())\n\n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts')\n      const data = await response.json()\n\n      dispatch(getPostsSuccess(data))\n    } catch (error) {\n      dispatch(getPostsFailure())\n    }\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Post = ({ post, excerpt }) => (\n  <article className={excerpt ? 'post-excerpt' : 'post'}>\n    <h2>{post.title}</h2>\n    <p>{excerpt ? post.body.substring(0, 100) : post.body}</p>\n\n    {excerpt && (\n      <Link to={`/posts/${post.id}`} className=\"button\">\n        View Post\n      </Link>\n    )}\n  </article>\n)\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { fetchPosts } from \"../actions/postsActions\";\n\nimport { Post } from \"../components/Post\";\n\nconst PostsPage = ({ dispatch, loading, posts, hasErrors }) => {\n  const [typedString, setTypedString] = useState(\"\");\n  useEffect(() => {\n    dispatch(fetchPosts());\n  }, [dispatch]);\n\n  const renderPosts = () => {\n    if (loading) return <p>Loading posts...</p>;\n    if (hasErrors) return <p>Unable to display posts.</p>;\n\n    const filteredPosts = posts.filter((post) => {\n      return post.title.toLowerCase().includes(typedString.toLowerCase());\n    });\n\n    return filteredPosts.map((post) => (\n      <Post key={post.id} post={post} excerpt />\n    ));\n  };\n\n  const onChangeHandler = (e) => {\n    setTypedString(e.target.value);\n  };\n\n  return (\n    <section>\n      <div class=\"posts-container\">\n        <h1>Posts</h1>\n        <div class=\"search-box\">\n          <button class=\"btn-search\">\n            <i class=\"fas fa-search\"></i>\n          </button>\n          <input\n            type=\"text\"\n            class=\"input-search\"\n            value={typedString}\n            onChange={onChangeHandler}\n          />\n        </div>\n      </div>\n      {renderPosts()}\n    </section>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.posts.loading,\n  posts: state.posts.posts,\n  hasErrors: state.posts.hasErrors\n});\n\nexport default connect(mapStateToProps)(PostsPage);\n","export const GET_POST = 'GET POSTS'\nexport const GET_POST_SUCCESS = 'GET_POST_SUCCESS'\nexport const GET_POST_FAILURE = 'GET_POST_FAILURE'\n\nexport const getPost = () => ({ type: GET_POST })\nexport const getPostSuccess = post => ({\n  type: GET_POST_SUCCESS,\n  payload: post,\n})\nexport const getPostFailure = () => ({ type: GET_POST_FAILURE })\n\nexport function fetchPost(id) {\n  return async dispatch => {\n    dispatch(getPost())\n\n    try {\n      const response = await fetch(\n        `https://jsonplaceholder.typicode.com/posts/${id}`\n      )\n      const data = await response.json()\n\n      dispatch(getPostSuccess(data))\n    } catch (error) {\n      dispatch(getPostFailure())\n    }\n  }\n}\n","export const GET_COMMENTS = 'GET COMMENTS'\nexport const GET_COMMENTS_SUCCESS = 'GET_COMMENTS_SUCCESS'\nexport const GET_COMMENTS_FAILURE = 'GET_COMMENTS_FAILURE'\n\nexport const getComments = () => ({ type: GET_COMMENTS })\nexport const getCommentsSuccess = comments => ({\n  type: GET_COMMENTS_SUCCESS,\n  payload: comments,\n})\nexport const getCommentsFailure = () => ({ type: GET_COMMENTS_FAILURE })\n\nexport function fetchComments(postId) {\n  return async dispatch => {\n    dispatch(getComments())\n\n    try {\n      const response = await fetch(\n        `https://jsonplaceholder.typicode.com/comments?postId=${postId}`\n      )\n      const data = await response.json()\n\n      dispatch(getCommentsSuccess(data))\n    } catch (error) {\n      dispatch(getCommentsFailure())\n    }\n  }\n}\n","import React from 'react'\n\nexport const Comment = ({ comment }) => (\n  <aside className=\"comment\">\n    <h2>{comment.title}</h2>\n    <h3>{comment.email}</h3>\n    <p>{comment.body}</p>\n  </aside>\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\n\nimport { fetchPost } from '../actions/postActions'\nimport { fetchComments } from '../actions/commentsActions'\n\nimport { Post } from '../components/Post'\nimport { Comment } from '../components/Comment'\n\nconst SinglePostPage = ({\n  match,\n  dispatch,\n  post,\n  comments,\n  hasErrors,\n  loading,\n}) => {\n  useEffect(() => {\n    const { id } = match.params\n\n    dispatch(fetchComments(id))\n    dispatch(fetchPost(id))\n  }, [dispatch, match])\n\n  const renderPost = () => {\n    if (loading.post) return <p>Loading post...</p>\n    if (hasErrors.post) return <p>Unable to display post.</p>\n\n    return <Post post={post} />\n  }\n\n  const renderComments = () => {\n    if (loading.comments) return <p>Loading comments...</p>\n    if (hasErrors.comments) return <p>Unable to display comments.</p>\n\n    return comments.map(comment => (\n      <Comment key={comment.id} comment={comment} />\n    ))\n  }\n\n  return (\n    <section>\n      {renderPost()}\n      <h2>Comments</h2>\n      {renderComments()}\n    </section>\n  )\n}\n\nconst mapStateToProps = state => ({\n  post: state.post.post,\n  comments: state.comments.comments,\n  loading: { post: state.post.loading, comments: state.comments.loading },\n  hasErrors: { post: state.post.hasErrors, comments: state.comments.hasErrors },\n})\n\nexport default connect(mapStateToProps)(SinglePostPage)\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport { Navbar } from \"./components/Navbar\";\nimport PostsPage from \"./pages/PostsPage\";\nimport SinglePostPage from \"./pages/SinglePostPage\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Navbar />\n      <Switch>\n        {/* <Route exact path=\"/\" component={DashboardPage} /> */}\n        <Route exact path=\"/\" component={PostsPage} />\n        <Route exact path=\"/posts/:id\" component={SinglePostPage} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import * as actions from '../actions/postsActions'\n\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  posts: [],\n}\n\nexport default function postsReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.GET_POSTS:\n      return { ...state, loading: true }\n    case actions.GET_POSTS_SUCCESS:\n      return { posts: action.payload, loading: false, hasErrors: false }\n    case actions.GET_POSTS_FAILURE:\n      return { ...state, loading: false, hasErrors: true }\n    default:\n      return state\n  }\n}\n","import * as actions from \"../actions/postActions\";\n\nexport const initialState = {\n  loading: true,\n  hasErrors: false,\n  post: {}\n};\n\nexport default function postReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.GET_POST:\n      return { ...state, loading: true };\n    case actions.GET_POST_SUCCESS:\n      return { post: action.payload, loading: false, hasErrors: false };\n    case actions.GET_POST_FAILURE:\n      return { ...state, loading: false, hasErrors: true };\n    default:\n      return state;\n  }\n}\n","import * as actions from '../actions/commentsActions'\n\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  comments: [],\n}\n\nexport default function commentsReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.GET_COMMENTS:\n      return { ...state, loading: true }\n    case actions.GET_COMMENTS_SUCCESS:\n      return { ...state, comments: action.payload, loading: false, hasErrors: false }\n    case actions.GET_COMMENTS_FAILURE:\n      return { ...state, loading: false, hasErrors: true }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport postsReducer from './postsReducer'\nimport postReducer from './postReducer'\nimport commentsReducer from './commentsReducer'\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  post: postReducer,\n  comments: commentsReducer,\n})\n\nexport default rootReducer\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport App from './App'\nimport rootReducer from './reducers'\n\nimport './index.css'\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}